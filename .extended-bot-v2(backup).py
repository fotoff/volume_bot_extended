
import asyncio
import os
import uuid
import json
from dataclasses import dataclass, field
from decimal import Decimal
from typing import Dict, List, Optional

from dotenv import load_dotenv

from x10.perpetual.configuration import STARKNET_MAINNET_CONFIG
from x10.perpetual.trading_client.trading_client import PerpetualTradingClient
from x10.perpetual.accounts import StarkPerpetualAccount
from x10.perpetual.orders import OrderSide, TimeInForce
from x10.perpetual.positions import PositionSide

from config import MARKETS, BUY_QTY, PRICE_PRECISION, SIZE_PRECISION, TICK_SECONDS
from config import BUY_TTL_SECONDS, BUY6_STEP_PCT, SELL_STEPS_PCT, SELL_SPLIT, PNL_MIN_PCT, BRANCH_SL_PCT

load_dotenv()

API_KEY = os.getenv("EXTENDED_API_KEY")
STARK_PUBLIC_KEY = os.getenv("EXTENDED_PUBLIC_KEY")
STARK_PRIVATE_KEY = os.getenv("EXTENDED_STARK_PRIVATE")
VAULT_ID = int(os.getenv("EXTENDED_VAULT_ID")) if os.getenv("EXTENDED_VAULT_ID") else None

STATE_FILE = os.getenv("BOT_STATE_FILE", "bot_state.json")

def rprice(symbol: str, v: Decimal) -> Decimal:
    p = PRICE_PRECISION.get(symbol, 2)
    q = Decimal(10) ** (-p)
    return (v.quantize(q))

def rsize(symbol: str, v: Decimal) -> Decimal:
    # –î–ª—è BTC –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if symbol == "BTC-USD":
        p = 4
    else:
        p = SIZE_PRECISION.get(symbol, 6)
    
    q = Decimal(10) ** (-p)
    vq = v.quantize(q)
    if vq == 0 and v > 0:
        return q
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º API
    min_size = Decimal("0.0001")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è BTC
    
    # –î–ª—è BTC —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0.0001, 0.0002, 0.0003, 0.0004
    if symbol == "BTC-USD":
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if vq < min_size:
            return min_size
        elif vq < Decimal("0.0002"):
            return Decimal("0.0001")
        elif vq < Decimal("0.0003"):
            return Decimal("0.0002")
        elif vq < Decimal("0.0004"):
            return Decimal("0.0003")
        else:
            return Decimal("0.0004")
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
    if vq < min_size:
        return min_size
    return vq

@dataclass
class SellLeg:
    leg: str
    target_pct: Decimal
    size: Decimal
    order_id: Optional[int] = None
    client_id: Optional[str] = None
    price: Optional[Decimal] = None

@dataclass
class Branch:
    branch_id: int
    symbol: str
    buy_price: Decimal
    size: Decimal
    wap: Decimal
    stop_price: Decimal
    active: bool = True
    sells: Dict[str, SellLeg] = field(default_factory=dict)

class Bot:
    def __init__(self, client: PerpetualTradingClient):
        self.c = client
        self.branches: Dict[str, Dict[int, Branch]] = {m: {} for m in MARKETS}
        self.next_branch_id: Dict[str, int] = {m: 1 for m in MARKETS}
        self.buy1_done: Dict[str, bool] = {m: False for m in MARKETS}
        self.buy1_ever_done: Dict[str, bool] = {m: False for m in MARKETS}
        self.buy6_anchor: Dict[str, Optional[Decimal]] = {m: None for m in MARKETS}
        self.pending_buys: Dict[str, Dict[int, dict]] = {m: {} for m in MARKETS}
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è BUY1
        self.buy1_in_progress: Dict[str, bool] = {m: False for m in MARKETS}

        self._load_state()

    # ---------- state ----------
    def _load_state(self):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            for m in MARKETS:
                self.buy1_ever_done[m] = bool(data.get("buy1_ever_done", {}).get(m, False))
                if self.buy1_ever_done[m]:
                    self.buy1_done[m] = True
        except Exception:
            pass

    async def restore_branches_from_position(self, symbol: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        size, wap = await self.position(symbol)
        if size <= 0:
            return
        
        self.log(symbol, f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ç–∫–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: size={size}, WAP={wap}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        b_id = self.new_branch_id(symbol)
        stop = rprice(symbol, wap * (Decimal("1") + Decimal(str(BRANCH_SL_PCT))))
        
        # –°–æ–∑–¥–∞–µ–º sell legs
        legs = {}
        for leg_name, tp, split in zip(("L1","L2","L3"), SELL_STEPS_PCT, SELL_SPLIT):
            legs[leg_name] = SellLeg(leg=leg_name, target_pct=Decimal(str(tp)), size=rsize(symbol, size * Decimal(str(split))))
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
        self.branches[symbol][b_id] = Branch(
            branch_id=b_id, symbol=symbol, buy_price=wap, size=size, wap=wap, stop_price=stop, active=True, sells=legs
        )
        
        self.log(symbol, f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ç–∫–∞ {b_id}: size={size}, buy={wap}, SL={stop}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        self.buy1_done[symbol] = True
        self.buy1_ever_done[symbol] = True
        
        # –Ø–∫–æ—Ä—å BUY6+ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–µ—Å—å - –æ–Ω –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ maybe_buy6
        # –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞
        self.buy6_anchor[symbol] = None

    def _save_state(self):
        data = {"buy1_ever_done": self.buy1_ever_done}
        try:
            with open(STATE_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception:
            pass

    async def stats(self, symbol: str):
        return await self.c.markets_info.get_market_statistics(market_name=symbol)

    async def best_bid_ask(self, symbol: str):
        st = await self.stats(symbol)
        bid = getattr(st.data, "bid_price", None) or getattr(st.data, "best_bid", None)
        ask = getattr(st.data, "ask_price", None) or getattr(st.data, "best_ask", None)
        return Decimal(str(bid)), Decimal(str(ask))

    async def last_price(self, symbol: str) -> Decimal:
        st = await self.stats(symbol)
        lp = getattr(st.data, "last_price", None) or getattr(st.data, "mark_price", None)
        return Decimal(str(lp))

    async def position(self, symbol: str):
        res = await self.c.account.get_positions(market_names=[symbol], position_side=PositionSide.LONG)
        size = Decimal("0"); wap = Decimal("0")
        for p in (res.data or []):
            sz = getattr(p, "size", Decimal(0))
            if sz and Decimal(str(sz)) > 0:
                size = Decimal(str(sz)); wap = Decimal(str(getattr(p, "open_price", 0))); break
        return size, wap

    async def open_orders(self, symbol: str, side: Optional[OrderSide]=None):
        kw = {"market_names":[symbol]}
        if side:
            kw["order_side"] = side
        res = await self.c.account.get_open_orders(**kw)
        return res.data or []

    async def place_limit(self, symbol: str, side: OrderSide, price: Decimal, size: Decimal, client_id: str, ttl_seconds: Optional[int] = None) -> Optional[int]:
        import datetime
        expire_time = None
        if ttl_seconds:
            expire_time = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(seconds=ttl_seconds)
        resp = await self.c.place_order(
            market_name=symbol,
            amount_of_synthetic=size,
            price=price,
            side=side,
            time_in_force=TimeInForce.GTT,
            external_id=client_id,
            expire_time=expire_time,
        )
        return int(resp.data.id) if resp and getattr(resp, "data", None) else None

    async def place_market_sell_ioc(self, symbol: str, size: Decimal, client_id: str):
        last = await self.last_price(symbol)
        resp = await self.c.place_order(
            market_name=symbol,
            amount_of_synthetic=size,
            price=last,
            side=OrderSide.SELL,
            time_in_force=TimeInForce.IOC,
            external_id=client_id
        )
        return int(resp.data.id) if resp and getattr(resp, "data", None) else None

    async def cancel_order(self, order_id: int):
        await self.c.orders.cancel_order(order_id=order_id)

    def log(self, s: str, msg: str):
        print(f"[{s}] {msg}", flush=True)

    def new_branch_id(self, symbol: str) -> int:
        bid = self.next_branch_id[symbol]; self.next_branch_id[symbol] += 1; return bid

    def has_active(self, symbol: str) -> bool:
        return any(b.active and b.size > 0 for b in self.branches[symbol].values())

    async def maybe_buy1(self, symbol: str):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.buy1_ever_done[symbol]:
            return
        if self.buy1_done[symbol] or self.has_active(symbol):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ BUY1
        if self.buy1_in_progress[symbol]:
            self.log(symbol, f"üîí BUY1 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤–∏—Å—è—á–∏—Ö BUY1 –æ—Ä–¥–µ—Ä–æ–≤
        existing_buy1 = any(
            meta.get("kind") == "BUY1" 
            for meta in self.pending_buys[symbol].values()
        )
        if existing_buy1:
            self.log(symbol, f"üîí BUY1 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - —É–∂–µ –µ—Å—Ç—å –≤–∏—Å—è—á–∏–π –æ—Ä–¥–µ—Ä")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ê–¢–û–ú–ê–†–ù–û
        self.buy1_in_progress[symbol] = True
        self.log(symbol, f"üîí –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É BUY1")
        
        try:
            bid, _ = await self.best_bid_ask(symbol)
            price = rprice(symbol, bid)
            size = rsize(symbol, Decimal(str(BUY_QTY[symbol])))
            self.log(symbol, f"üîç –ü–æ–ø—ã—Ç–∫–∞ BUY1: size={size}, price={price}")
            cid = f"{symbol}:BRNEW:BUY1:{uuid.uuid4().hex[:8]}"
            oid = await self.place_limit(symbol, OrderSide.BUY, price, size, cid, ttl_seconds=BUY_TTL_SECONDS)
            if oid:
                self.pending_buys[symbol][oid] = {"price": price, "size": size, "client_id": cid, "ts": asyncio.get_event_loop().time(), "kind": "BUY1"}
                self.log(symbol, f"üü¢ BUY1 —Ä–∞–∑–º–µ—â—ë–Ω {size}@{price} TTL={BUY_TTL_SECONDS}s")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                self.buy1_in_progress[symbol] = False
                self.log(symbol, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å BUY1, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            self.buy1_in_progress[symbol] = False
            self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ BUY1: {e}, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
            raise

    async def maybe_buy6(self, symbol: str, last: Decimal):
        if not self.buy1_done[symbol]:
            return
        
        anchor = self.buy6_anchor[symbol]
        if anchor is None:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—ç—Ç–æ –±—É–¥–µ—Ç –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ BUY1)
            self.buy6_anchor[symbol] = last
            self.log(symbol, f"üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å BUY6+ –Ω–∞ –º–∏–Ω–∏–º—É–º: {last}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∫–æ—Ä—å –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∫–æ—Ä—è
        if last < anchor:
            self.buy6_anchor[symbol] = last
            self.log(symbol, f"üìâ –û–±–Ω–æ–≤–ª—è–µ–º —è–∫–æ—Ä—å BUY6+ –Ω–∞ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º: {last}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∫–æ—Ä—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        current_anchor = self.buy6_anchor[symbol]
        trigger = current_anchor * (Decimal("1") + Decimal(str(BUY6_STEP_PCT)))
        self.log(symbol, f"üéØ BUY6+ –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞={last}, —è–∫–æ—Ä—å={current_anchor}, —Ç—Ä–∏–≥–≥–µ—Ä={trigger}")
        
        # –†–∞–∑–º–µ—â–∞–µ–º BUY6+ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ >= —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if last >= trigger:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ BUY6+ –æ—Ä–¥–µ—Ä–∞
            existing_buy6 = any(
                meta.get("kind") == "BUY6" 
                for meta in self.pending_buys[symbol].values()
            )
            if existing_buy6:
                self.log(symbol, f"üîí BUY6+ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω, –∂–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
                return
            
            bid, _ = await self.best_bid_ask(symbol)
            price = rprice(symbol, bid)
            size = rsize(symbol, Decimal(str(BUY_QTY[symbol])))
            cid = f"{symbol}:BRNEW:BUY6:{uuid.uuid4().hex[:8]}"
            oid = await self.place_limit(symbol, OrderSide.BUY, price, size, cid, ttl_seconds=180)  # 3 –º–∏–Ω—É—Ç—ã TTL –¥–ª—è BUY6+
            if oid:
                self.pending_buys[symbol][oid] = {"price": price, "size": size, "client_id": cid, "ts": asyncio.get_event_loop().time(), "kind": "BUY6"}
                # –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è BUY6+ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —è–∫–æ—Ä—å –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                self.buy6_anchor[symbol] = last
                self.log(symbol, f"üü¢ BUY6+ —Ä–∞–∑–º–µ—â—ë–Ω {size}@{price}; –Ω–æ–≤—ã–π —è–∫–æ—Ä—å={last}")
        else:
            self.log(symbol, f"üîç BUY6+ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {last} < {trigger}")

    async def enforce_buy_ttls(self, symbol: str):
        if not self.pending_buys[symbol]:
            return
        opens = await self.open_orders(symbol, side=OrderSide.BUY)
        open_map = {int(getattr(o, "id")): o for o in opens}
        now = asyncio.get_event_loop().time()
        to_delete = []
        
        for oid, meta in list(self.pending_buys[symbol].items()):
            o = open_map.get(int(oid))
            age = now - meta["ts"]
            kind = meta.get("kind", "BUY")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
            ttl_seconds = 180 if kind == "BUY6" else BUY_TTL_SECONDS  # BUY6: 3 –º–∏–Ω, BUY1: 5 –º–∏–Ω
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            if o is None:
                # –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
                pos_size, pos_wap = await self.position(symbol)
                if pos_size > 0:
                    # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                    await self.on_buy_filled(symbol, price=meta["price"], size=meta["size"], kind=kind)
                    self.log(symbol, f"‚úÖ BUY –∏—Å–ø–æ–ª–Ω–µ–Ω ‚Üí —Å–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É: size={meta['size']}, buy={meta['price']}")
                else:
                    # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –æ—Ä–¥–µ—Ä –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
                    self.log(symbol, f"‚ö†Ô∏è BUY –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç: {meta['size']}@{meta['price']} ({kind})")
                to_delete.append(oid)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            filled = Decimal(str(getattr(o, "filled_qty", 0) or 0))
            qty = Decimal(str(getattr(o, "qty", 0) or 0))
            if qty > 0 and filled >= qty:
                await self.on_buy_filled(symbol, price=meta["price"], size=meta["size"], kind=kind)
                to_delete.append(oid)
            elif filled > 0:
                self.log(symbol, f"‚è≥ BUY —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω {filled}/{qty}, –∂–¥—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            elif age >= ttl_seconds:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
                try:
                    await self.cancel_order(int(oid))
                    self.log(symbol, f"üü° –û—Ç–º–µ–Ω—è–µ–º {kind} (TTL {ttl_seconds}s) {meta['size']}@{meta['price']}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ BUY1 –æ—Ä–¥–µ—Ä, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–µ—Ä–µ—Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    if kind == "BUY1":
                        self.buy1_in_progress[symbol] = False
                        self.log(symbol, f"üîì –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É BUY1 –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ TTL –¥–ª—è –ø–µ—Ä–µ—Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    
                except Exception as e:
                    self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {kind} {oid}: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç–æ–∂–µ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è BUY1
                    if kind == "BUY1":
                        self.buy1_in_progress[symbol] = False
                        self.log(symbol, f"üîì –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É BUY1 –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã")
                
                # –ü–µ—Ä–µ—Ä–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –±–ª–∏–∂–µ –∫ —Ä—ã–Ω–∫—É
                bid, _ = await self.best_bid_ask(symbol)
                new_price = rprice(symbol, bid)
                new_cid = ":".join(meta["client_id"].split(":")[:-1] + [uuid.uuid4().hex[:8]])
                new_oid = await self.place_limit(symbol, OrderSide.BUY, new_price, meta["size"], new_cid, ttl_seconds=ttl_seconds)
                if new_oid:
                    self.pending_buys[symbol][new_oid] = {"price": new_price, "size": meta["size"], "client_id": new_cid, "ts": now, "kind": kind}
                    self.log(symbol, f"üîÅ –ü–µ—Ä–µ—Ä–∞–∑–º–µ—â–∞–µ–º {kind} –±–ª–∏–∂–µ –∫ —Ä—ã–Ω–∫—É: {meta['size']}@{new_price}")
                to_delete.append(oid)
        
        for oid in to_delete:
            self.pending_buys[symbol].pop(oid, None)

    async def on_buy_filled(self, symbol: str, price: Decimal, size: Decimal, kind: str = "BUY"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        existing_branch = None
        for b in self.branches[symbol].values():
            if b.active and b.size == size and abs(b.wap - price) < Decimal("0.01"):
                existing_branch = b
                self.log(symbol, f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ {b.branch_id}, –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é")
                break
        
        if existing_branch:
            # –ï—Å–ª–∏ —ç—Ç–æ BUY1, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if kind == "BUY1" and not self.buy1_done[symbol]:
                self.buy1_done[symbol] = True
                self.buy1_ever_done[symbol] = True
                self._save_state()
                self.buy6_anchor[symbol] = price
                self.log(symbol, "üìå BUY1 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: –≤–∫–ª—é—á–∞–µ–º BUY6+ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–≤—Å–µ–≥–¥–∞")
                self.buy1_in_progress[symbol] = False
            return
        
        if not self.buy1_done[symbol]:
            self.buy1_done[symbol] = True
            self.buy1_ever_done[symbol] = True
            self._save_state()
            self.buy6_anchor[symbol] = price
            self.log(symbol, "üìå BUY1 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: –≤–∫–ª—é—á–∞–µ–º BUY6+ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–≤—Å–µ–≥–¥–∞")
            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É BUY1 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            self.buy1_in_progress[symbol] = False
        
        b_id = self.new_branch_id(symbol)
        stop = rprice(symbol, price * (Decimal("1") + Decimal(str(BRANCH_SL_PCT))))
        legs = {}
        for leg_name, tp, split in zip(("L1","L2","L3"), SELL_STEPS_PCT, SELL_SPLIT):
            legs[leg_name] = SellLeg(leg=leg_name, target_pct=Decimal(str(tp)), size=rsize(symbol, size * Decimal(str(split))))
        self.branches[symbol][b_id] = Branch(
            branch_id=b_id, symbol=symbol, buy_price=price, size=size, wap=price, stop_price=stop, active=True, sells=legs
        )
        self.log(symbol, f"‚úÖ BUY –∏—Å–ø–æ–ª–Ω–µ–Ω ‚Üí –≤–µ—Ç–∫–∞ {b_id}: size={size}, buy={price}, SL={stop} ({kind})")

    async def ensure_branch_sells(self, symbol: str):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
        pos_size, pos_wap = await self.position(symbol)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        active_branches = [b for b in self.branches[symbol].values() if b.active and b.size > 0]
        if active_branches:
            self.log(symbol, f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(active_branches)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è sell –æ—Ä–¥–µ—Ä–æ–≤")
        else:
            self.log(symbol, f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è sell –æ—Ä–¥–µ—Ä–æ–≤")
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º sell –æ—Ä–¥–µ—Ä–∞
        if pos_size <= 0:
            self.log(symbol, f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ (pos={pos_size}), –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º sell –æ—Ä–¥–µ—Ä–∞")
            return
        
        self.log(symbol, f"üìä –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos_size} BTC –ø–æ —Ü–µ–Ω–µ {pos_wap}")
        
        opens = await self.open_orders(symbol, side=OrderSide.SELL)
        open_by_cid = {str(getattr(o, "external_id", "") or ""): o for o in opens}

        for b in list(self.branches[symbol].values()):
            if not b.active or b.size <= 0:
                continue
            pnl_floor = (b.wap or pos_wap) * (Decimal("1") + Decimal(str(PNL_MIN_PCT)))

            placed_total = Decimal("0")
            for leg in b.sells.values():
                if leg.client_id and leg.client_id in open_by_cid:
                    placed_total += Decimal(str(getattr(open_by_cid[leg.client_id], "qty", 0) or 0))

            for leg_name, leg in b.sells.items():
                target = b.buy_price * (Decimal("1") + leg.target_pct)
                min_price = rprice(symbol, max(target, pnl_floor))

                existing = open_by_cid.get(leg.client_id or "")
                if existing:
                    ex_price = Decimal(str(getattr(existing, "price", 0) or 0))
                    if ex_price < min_price:
                        try:
                            await self.cancel_order(int(getattr(existing, "id")))
                            self.log(symbol, f"‚úèÔ∏è –ü–æ–≤—ã—à–∞–µ–º SELL {leg_name} –≤–µ—Ç–∫–∏ {b.branch_id}: –æ—Ç–º–µ–Ω–∞ {ex_price} < {min_price}")
                        except Exception as e:
                            self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SELL {leg_name}: {e}")
                        existing = None
                    else:
                        continue

                remaining = b.size - placed_total
                if remaining <= 0:
                    continue
                place_size = min(leg.size, remaining)
                if place_size <= 0:
                    continue
                cid = f"{symbol}:BR{b.branch_id}:S:{leg_name}:{uuid.uuid4().hex[:6]}"
                oid = await self.place_limit(symbol, OrderSide.SELL, min_price, rsize(symbol, place_size), cid, ttl_seconds=None)
                if oid:
                    leg.client_id = cid; leg.order_id = oid; leg.price = min_price
                    placed_total += place_size
                    self.log(symbol, f"üü† SELL {leg_name} –≤–µ—Ç–∫–∏ {b.branch_id} {place_size}@{min_price} (‚â•PnL)")

    async def dedupe_branch_sells(self, symbol: str, b: Branch):
        opens = await self.open_orders(symbol, side=OrderSide.SELL)
        branch_sells = [o for o in opens if str(getattr(o, "external_id", "")).startswith(f"{symbol}:BR{b.branch_id}:S:")]
        total = sum(Decimal(str(getattr(o, "qty", 0) or 0)) for o in branch_sells)
        if total <= b.size:
            return
        branch_sells.sort(key=lambda o: Decimal(str(getattr(o, "price", 0) or 0)))
        excess = total - b.size; cancelled = Decimal("0")
        for o in branch_sells:
            if cancelled >= excess:
                break
            try:
                await self.cancel_order(int(getattr(o, "id")))
                cancelled += Decimal(str(getattr(o, "qty", 0) or 0))
                self.log(symbol, f"üßπ –û—Ç–º–µ–Ω–∏–ª–∏ –ª–∏—à–Ω–∏–π SELL –≤–µ—Ç–∫–∏ {b.branch_id}: {getattr(o,'id')} {getattr(o,'qty')}@{getattr(o,'price')}")
            except Exception as e:
                self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ª–∏—à–Ω–µ–≥–æ SELL: {e}")

    async def _market_close_branch(self, symbol: str, b: Branch, last: Decimal):
        rem = rsize(symbol, b.size)
        if rem <= 0:
            b.active = False; return
        
        cid = f"{symbol}:BR{b.branch_id}:SL:{uuid.uuid4().hex[:6]}"
        try:
            pre_pos, _ = await self.position(symbol)
            oid = await self.place_market_sell_ioc(symbol, rem, cid)
            self.log(symbol, f"üõë SL –≤–µ—Ç–∫–∏ {b.branch_id}: market IOC {rem} (oid={oid})")
        except Exception as e:
            self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SL market –≤–µ—Ç–∫–∏ {b.branch_id}: {e}")
            return

        # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è stop-loss –æ—Ä–¥–µ—Ä–∞
        try:
            target_dec = min(rem, pre_pos)
            deadline = asyncio.get_event_loop().time() + 15.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            while True:
                await asyncio.sleep(0.5)
                cur_pos, _ = await self.position(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
                if cur_pos <= pre_pos - target_dec * Decimal("0.99") or cur_pos <= Decimal("0"):
                    self.log(symbol, f"‚úÖ SL –∏—Å–ø–æ–ª–Ω–µ–Ω: –ø–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–∏–ª–∞—Å—å —Å {pre_pos} –¥–æ {cur_pos}")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                if asyncio.get_event_loop().time() >= deadline:
                    self.log(symbol, f"‚è∞ SL –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ: –ø–æ–∑–∏—Ü–∏—è {cur_pos} –Ω–µ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
                    break
        except Exception as e:
            self.log(symbol, f"‚ö†Ô∏è SL –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}")

        # –ü–æ—Å–ª–µ SL: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º SELL –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≤–µ—Ç–∫–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
        cur_pos, _ = await self.position(symbol)
        if cur_pos <= Decimal("0"):
            opens = await self.open_orders(symbol, side=OrderSide.SELL)
            cancelled_count = 0
            for o in opens:
                if str(getattr(o, "external_id", "")).startswith(f"{symbol}:BR{b.branch_id}:S:"):
                    try:
                        await self.cancel_order(int(getattr(o, "id")))
                        cancelled_count += 1
                        self.log(symbol, f"‚ùå –û—Ç–º–µ–Ω—ë–Ω SELL –≤–µ—Ç–∫–∏ {b.branch_id}: {getattr(o,'id')} (–ø–æ—Å–ª–µ SL market)")
                    except Exception as e:
                        self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SELL –≤–µ—Ç–∫–∏ {b.branch_id} –ø–æ—Å–ª–µ SL: {e}")
            self.log(symbol, f"üßπ –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} sell –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Ç–∫–∏ {b.branch_id}")
            b.active = False
        else:
            # –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –º–∞—Ä–∫–µ—Ç—É
            self.log(symbol, f"üîÑ –ü–æ—Å–ª–µ SL –ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–ª–∞—Å—å {cur_pos}, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –º–∞—Ä–∫–µ—Ç—É")
            try:
                force_cid = f"{symbol}:BR{b.branch_id}:SL_FORCE:{uuid.uuid4().hex[:6]}"
                force_oid = await self.place_market_sell_ioc(symbol, cur_pos, force_cid)
                self.log(symbol, f"üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {cur_pos} (oid={force_oid})")
                
                # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                await asyncio.sleep(2.0)
                final_pos, _ = await self.position(symbol)
                if final_pos <= Decimal("0"):
                    self.log(symbol, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º SL")
                else:
                    self.log(symbol, f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {final_pos}")
            except Exception as e:
                self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—è–µ–º SELL –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—Ç–∫—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ SL
            opens = await self.open_orders(symbol, side=OrderSide.SELL)
            cancelled_count = 0
            for o in opens:
                if str(getattr(o, "external_id", "")).startswith(f"{symbol}:BR{b.branch_id}:S:"):
                    try:
                        await self.cancel_order(int(getattr(o, "id")))
                        cancelled_count += 1
                        self.log(symbol, f"‚ùå –û—Ç–º–µ–Ω—ë–Ω SELL –≤–µ—Ç–∫–∏ {b.branch_id}: {getattr(o,'id')} (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ SL)")
                    except Exception as e:
                        self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SELL –≤–µ—Ç–∫–∏ {b.branch_id} –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ SL: {e}")
            self.log(symbol, f"üßπ –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} sell –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Ç–∫–∏ {b.branch_id}")
            b.active = False

    async def cleanup_orphan_sell_orders(self, symbol: str):
        """–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ SELL –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—Ç–∫–∏."""
        size, _ = await self.position(symbol)
        if size > 0:
            return
        opens = await self.open_orders(symbol, side=OrderSide.SELL)
        cancelled = 0
        for o in opens:
            try:
                await self.cancel_order(int(getattr(o, "id")))
                cancelled += 1
            except Exception as e:
                self.log(symbol, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SELL –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        if cancelled:
            self.log(symbol, f"üßπ –û—Ç–º–µ–Ω–∏–ª–∏ {cancelled} SELL –æ—Ä–¥–µ—Ä–æ–≤, —Ç.–∫. –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç")
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—Ç–∫–∏ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        for b in self.branches[symbol].values():
            b.active = False

    async def check_branch_sl(self, symbol: str, last: Decimal):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if not self.has_active(symbol):
            return
            
        to_close = []
        for b in self.branches[symbol].values():
            if b.active and last <= b.stop_price:
                to_close.append(b)
        
        if not to_close:
            return
            
        self.log(symbol, f"üö® SL: —Å—Ä–∞–±–æ—Ç–∞–ª —É {len(to_close)} –≤–µ—Ç–æ–∫ ‚Üí market-first")
        
        for b in to_close:
            await self._market_close_branch(symbol, b, last)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∫–æ—Ä—å BUY6+ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫
        self.buy6_anchor[symbol] = None
        self.log(symbol, "‚ôªÔ∏è –ü–æ—Å–ª–µ SL: BUY6+ anchor —Å–±—Ä–æ—à–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø–æ–∫—É–ø–∫–∞–º")

    async def run_once(self, symbol: str):
        last = await self.last_price(symbol)
        size, wap = await self.position(symbol)
        self.log(symbol, f"üìà last={last} | pos={size} WAP={wap}")
        
        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è
        await self.check_branch_sl(symbol, last)
        
        # 2) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–æ–∫: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –Ω–µ—Ç ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è
        active_branches = [b for b in self.branches[symbol].values() if b.active]
        if size > 0 and not active_branches:
            self.log(symbol, f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ç–∫–∏ –∏ SELL –æ—Ä–¥–µ—Ä–∞")
            await self.restore_branches_from_position(symbol)
        
        # 3) –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        await self.maybe_buy1(symbol)
        await self.maybe_buy6(symbol, last)
        await self.ensure_branch_sells(symbol)
        for b in self.branches[symbol].values():
            if b.active:
                await self.dedupe_branch_sells(symbol, b)
        
        # 4) –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—á–∏—Å—Ç–∫–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–º–µ–Ω—è–µ–º SELL –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—Ç–∫–∏
        await self.cleanup_orphan_sell_orders(symbol)
        
        # 5) TTL –¥–ª—è buy –æ—Ä–¥–µ—Ä–æ–≤ ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è
        await self.enforce_buy_ttls(symbol)

    async def run(self):
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ç–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        for symbol in MARKETS:
            await self.restore_branches_from_position(symbol)
        
        while True:
            try:
                await asyncio.gather(*(self.run_once(m) for m in MARKETS))
            except Exception as e:
                print("Loop error:", e, flush=True)
            await asyncio.sleep(TICK_SECONDS)

async def main():
    account = StarkPerpetualAccount(
        vault=VAULT_ID,
        private_key=STARK_PRIVATE_KEY,
        public_key=STARK_PUBLIC_KEY,
        api_key=API_KEY,
    )
    client = PerpetualTradingClient(STARKNET_MAINNET_CONFIG, account)
    bot = Bot(client)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
